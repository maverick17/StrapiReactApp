{"version":3,"sources":["pages/Homepage.js","pages/ReviewDetails.js","pages/Category.js","components/SiteHeader.js","App.js","index.js"],"names":["REVIEWS","gql","_templateObject","_taggedTemplateLiteral","Homepage","_useQuery","useQuery","loading","error","data","React","createElement","console","log","reviews","map","review","key","id","className","attributes","rating","title","body","Link","to","concat","REVIEW","ReviewDetails","useParams","variables","CATEGORY","Category","category","Name","CATEGORIES","SiteHeader","categories","client","ApolloClient","uri","cache","InMemoryCache","App","Router","ApolloProvider","Routes","Route","exact","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.d0baec27.chunk.js","sourcesContent":["import React from 'react'\n//import useFetch from '../hooks/useFetch'\nimport {Link} from 'react-router-dom'\nimport { useQuery, gql } from '@apollo/client'\n\nconst REVIEWS = gql`\nquery GetReviews {\n    reviews {\n    data {\n      id\n      attributes {\n        title,\n        rating,\n        body\n      }\n    }\n  }\n}\n`\n\nexport default function Homepage() {\n\n  //const { loading, error, data } = useFetch('http://localhost:1337/api/reviews');\n  const { loading, error, data } = useQuery(REVIEWS)\n\n  if(loading) return <p>Loading...</p>\n  //if(error.length > 0) return <p>Error:</p>\n  if(error) return <p>Error :(</p>\n\n  console.log(data);\n  \n  return (\n    <div>\n      {data.reviews.data.map(review => (\n        <div key={review.id} className=\"review-card\">\n          <div className='rating'>{review.attributes.rating}</div>\n          <h2>{review.attributes.title}</h2>\n\n          <small>console list</small>\n\n          <p>{review.attributes.body}</p>\n          <Link to={`/details/${review.id}`}>Read more</Link>\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\nimport {useParams} from 'react-router-dom'\n//import useFetch from '../hooks/useFetch'\nimport { useQuery, gql } from '@apollo/client'\n\nconst REVIEW = gql`\n  query GetReview($id: ID!) {\n    review(id: $id) {\n      data {\n        id\n        attributes {\n          title,\n          rating,\n          body\n        }\n      }\n    }\n  }\n`\n\nexport default function ReviewDetails() {\n  const { id } = useParams()\n // const { loading, error, data } = useFetch('http://localhost:1337/api/reviews/' + id)\n\n const { loading, error, data } = useQuery(REVIEW, {\n  variables: { id: id }\n })\n\n  if(loading) return <p>Loading...</p>\n  //if(error.length > 0) return <p>Error:</p>\n  if(error) return <p>Error :(</p>\n\n  console.log(data.review.data);\n  console.log('loading'); \n\n  return (\n    <div>\n      \n      <div className='review-card'>\n            <div className='rating'>{data.review.data.attributes.rating}</div>\n            <h2>{data.review.data.attributes.title}</h2>\n            <small>console list</small>\n            <p>{data.review.data.attributes.body}</p>\n      </div>\n     \n    </div>\n  )\n}\n","import React from 'react'\nimport { useQuery, gql } from '@apollo/client'\nimport { useParams, Link } from 'react-router-dom'\n\nconst CATEGORY = gql`\n  query GetCategory($id: ID!) {\n    category(id: $id) {\n      data {\n        id\n        attributes {\n          Name\n          reviews {\n            data {\n              attributes {\n                title\n                rating\n                body\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default function Category() {\n  const { id } = useParams()\n  const { loading, error, data } = useQuery(CATEGORY, {\n    variables: { id: id }\n  })\n\n  if(loading) return <p>Loading...</p>\n  if(error) return <p>Error :(</p>\n\n  console.log(data.category.data.attributes);\n  return (\n    <div>\n      <h2>{data.category.data.attributes.Name}</h2>\n      {data.category.map(review => (\n        <div key={review.id} className=\"review-card\">\n          <div className='rating'>{review.attributes.rating}</div>\n          <h2>{review.attributes.title}</h2>\n\n          <small>console list</small>\n\n          <p>{review.attributes.body}</p>\n          <Link to={`/details/${review.id}`}>Read more</Link>\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { useQuery, gql } from '@apollo/client'; \n\nconst CATEGORIES = gql`\n  query GetCategories {\n    categories {\n      data {  \n        id\n        attributes {\n          Name\n        }\n      }\n    }\n  }\n`\n\nfunction SiteHeader() {\n  const { loading, error, data } = useQuery(CATEGORIES)\n\n  if(loading) return <p>Loading...</p>\n  //if(error.length > 0) return <p>Error:</p>\n  if(error) return <p>Error :(</p>\n  console.log(data);\n\n  return (\n    <div className=\"site-header\">\n      <Link to=\"/\"><h1>Ninja Reviews</h1></Link>\n      <nav className=\"categories\">\n        <span>Filter reviews by category:</span>\n        {data.categories.data.map(category => (\n          <Link key={category.id} to={`/category/${category.id}`}>\n            {category.attributes.Name}\n          </Link>\n        ))}\n      </nav>\n    </div>\n  )\n}\n\nexport default SiteHeader;","import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\nimport React from 'react'\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\"\n\n//page & layout\nimport Homepage from './pages/Homepage'\nimport ReviewDetails from './pages/ReviewDetails'\nimport Category from './pages/Category'\nimport SiteHeader from './components/SiteHeader'\n\n\n// apollo client\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:1337/graphql',\n  cache: new InMemoryCache()\n})\n\nfunction App() {\n  return (\n    <Router>\n      <ApolloProvider client={client}>\n      <div className=\"App\">\n        <SiteHeader />\n        <Routes>\n          <Route exact path=\"/\" element={<Homepage />} />\n\n          <Route path=\"/details/:id\" element={<ReviewDetails />} />\n\n          <Route path=\"/category/:id\" element={<Category />} />\n        </Routes>\n      </div>\n      </ApolloProvider>\n    </Router>\n  );\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}