{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nvar EAGER_METHODS = ['refetch', 'reobserve', 'fetchMore', 'updateQuery', 'startPolling', 'subscribeToMore'];\nexport function useLazyQuery(query, options) {\n  var _a;\n  var abortControllersRef = useRef(new Set());\n  var execOptionsRef = useRef();\n  var merged = execOptionsRef.current ? mergeOptions(options, execOptionsRef.current) : options;\n  var internalState = useInternalState(useApolloClient(options && options.client), (_a = merged === null || merged === void 0 ? void 0 : merged.query) !== null && _a !== void 0 ? _a : query);\n  var useQueryResult = internalState.useQuery(__assign(__assign({}, merged), {\n    skip: !execOptionsRef.current\n  }));\n  var initialFetchPolicy = useQueryResult.observable.options.initialFetchPolicy || internalState.getDefaultFetchPolicy();\n  var result = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current\n  });\n  var eagerMethods = useMemo(function () {\n    var eagerMethods = {};\n    var _loop_1 = function _loop_1(key) {\n      var method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          internalState.forceUpdate();\n        }\n        return method.apply(this, arguments);\n      };\n    };\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n      _loop_1(key);\n    }\n    return eagerMethods;\n  }, []);\n  Object.assign(result, eagerMethods);\n  useEffect(function () {\n    return function () {\n      abortControllersRef.current.forEach(function (controller) {\n        controller.abort();\n      });\n    };\n  }, []);\n  var execute = useCallback(function (executeOptions) {\n    var controller = new AbortController();\n    abortControllersRef.current.add(controller);\n    execOptionsRef.current = executeOptions ? __assign(__assign({}, executeOptions), {\n      fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy\n    }) : {\n      fetchPolicy: initialFetchPolicy\n    };\n    var promise = internalState.asyncUpdate(controller.signal).then(function (queryResult) {\n      abortControllersRef.current.delete(controller);\n      return Object.assign(queryResult, eagerMethods);\n    });\n    promise.catch(function () {\n      abortControllersRef.current.delete(controller);\n    });\n    return promise;\n  }, []);\n  return [execute, result];\n}","map":null,"metadata":{},"sourceType":"module"}